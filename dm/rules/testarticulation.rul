(in-package :dm);;load this file in DM from the "rules" menu and;;apply the rule directly in the listener: ;; (simple-staccato-test 1);; or include it in a rule palette ;; perform each note with a staccato of 50%;;k is the normal input quantity var - not used here(defun simple-staccato-test (k)  (each-note-if    (not (this 'rest))    (then      (set-this 'dro (/ (this 'dr) 2.0))      )))(defun staccato-on-the-third-beat (k)  (mark-beat-number-in-measure)  (each-note-if    (this :beat)    (= (this :beat) 3)    (then      (set-this 'dro (/ (this 'dr) 2.0))      )));; ---- meter utilities ------------;;existing in DM: , ;; (mark-beat) marks every note starting with a beat with :beat t;; (mark-offbeat) marks every note starting with a offbeat with :offbeat t;mark each note starting on a beat with :beat <number in the measure>;beat note value from meter indication(defun mark-beat-number-in-measure ()  (let ((beat-value 4)        ack-value        beat-nr)    (each-note             ;mark beat      (when (this 'meter)          (setq beat-value (/ 1 (cadr (this 'meter)))) )      (when (this 'bar)         (setq ack-value 0)        (setq beat-nr 1) )      (when (zerop (mod ack-value beat-value))        (set-this :beat (1+ (round (/ ack-value beat-value))))        (incf beat-nr)        ;(print-ll *i* "  " (this 'n))        )     (incf ack-value (get-note-value-fraction *i*))      )))